"""
==========================================================================================
Uses the reformatted CSV's generated by final_tsms_reformatter.py and returns aggregated
CSV's (complete records, monthly records, and daily records).

To be used in conjunction with the reformatter script:
    Step 1. Run final_paws_reformatter.py 
    Step 2. Run final_paws_filegen.py
Where the data DESTINATION in step 1 is the data ORIGIN in step 2.

NOTE: Requires the complete, monthly, and daily folders to have already been created.
==========================================================================================
"""
import os
import pandas as pd
import numpy as np
from pathlib import Path


data_origin = "/Users/rzieber/Documents/3D-PAWS/Turkiye/reformatted/CSV_Format/TSMS/Aug2022-Nov2024/"
all_files = sorted([file for file in Path(data_origin).rglob('*') if file.is_file() and file.name != ".DS_Store" and "_FINAL.csv" not in file.name])

dfs = []

for file in all_files: 
    dfs.append(pd.read_csv(file, low_memory=False))

print("Creating CSV's for TSMS full data period.")

for i in range(len(dfs)):
    print(f"\tGenerating {all_files[i].name[:len(all_files[i].name)-19]}")

    df = dfs[i]
    file = all_files[i]
    filepath = str(file)[:len(str(file))-25]

    for year_month, tsms_grouped in df.groupby('year_month'):
        print(f"\t\t{year_month}")

        tsms_grouped.drop(columns=['Unnamed: 0','year_month', 'year_month_day', 'year_month_day_hour'], inplace=True)

        tsms_grouped.rename(columns={
            'Temperature':'temperature', 'Humidity':'humidity', 'Actual Pressure':'actual_pressure',
            'Sea Level Pressure':'sea_level_pressure', 'Mean Wind Direction':'avg_wind_dir',
            'Mean Wind Speed':'avg_wind_speed', 'Total Rainfall':'total_rainfall'
        }, inplace=True)

        columns = [
            'date',
            'temperature', 'humidity', 'actual_pressure', 'sea_level_pressure',
            'avg_wind_dir', 'avg_wind_speed', 'total_rainfall'
        ]

        tsms_grouped = tsms_grouped[columns]

        tsms_grouped.set_index('date', inplace=True)

        tsms_grouped.to_csv(filepath+f"/monthly/{all_files[i].name[:len(all_files[i].name)-19]}_{year_month}_FINAL.csv") 


    for year_month_day, tsms_grouped in df.groupby('year_month_day'):
        print(f"\t\t{year_month_day}")
        
        tsms_grouped.drop(columns=['Unnamed: 0','year_month', 'year_month_day', 'year_month_day_hour'], inplace=True)

        tsms_grouped.rename(columns={
            'Temperature':'temperature', 'Humidity':'humidity', 'Actual Pressure':'actual_pressure',
            'Sea Level Pressure':'sea_level_pressure', 'Mean Wind Direction':'avg_wind_dir',
            'Mean Wind Speed':'avg_wind_speed', 'Total Rainfall':'total_rainfall'
        }, inplace=True)

        columns = [
            'date',
            'temperature', 'humidity', 'actual_pressure', 'sea_level_pressure',
            'avg_wind_dir', 'avg_wind_speed', 'total_rainfall'
        ]

        tsms_grouped = tsms_grouped[columns]

        tsms_grouped.set_index('date', inplace=True)

        tsms_grouped.to_csv(filepath+f"/daily/{all_files[i].name[:len(all_files[i].name)-19]}_{year_month_day}_FINAL.csv")

    
    df.drop(columns=['Unnamed: 0','year_month', 'year_month_day', 'year_month_day_hour'], inplace=True)

    df.rename(columns={
        'Temperature':'temperature', 'Humidity':'humidity', 'Actual Pressure':'actual_pressure',
        'Sea Level Pressure':'sea_level_pressure', 'Mean Wind Direction':'avg_wind_dir',
        'Mean Wind Speed':'avg_wind_speed', 'Total Rainfall':'total_rainfall'
    }, inplace=True)

    columns = [
        'date',
        'temperature', 'humidity', 'actual_pressure', 'sea_level_pressure',
        'avg_wind_dir', 'avg_wind_speed', 'total_rainfall'
    ]

    df = df[columns]

    df.set_index('date', inplace=True)

    df.to_csv(filepath+f"/complete/{all_files[i].name[:len(all_files[i].name)-19]}_CompleteRecord_FINAL.csv")

    os.remove(str(os.path.join(data_origin, f"{all_files[i].name[:len(all_files[i].name)-19]}", f"{all_files[i].name}")))
